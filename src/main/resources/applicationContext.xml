<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="cxy.spring.jms">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!--消费者端配置-->
    <!--
            cxy 必须要配置的三个信息
                JMS 服务端地址  -  ConnectionFactory
                Destination
                接收到消息后进行消息处理的MessageListener
        -->
    <!--1、MessageListener - 单纯消息接收-->
    <bean class="org.springframework.jms.listener.DefaultMessageListenerContainer" id="listenerContainer">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="destination" ref="activeMQQueue"/>
        <property name="messageListener" ref="consumerMessageListener"/>
    </bean>
    <!--自定义消息处理MessageListener-->
    <bean class="cxy.spring.jms.listener.ConsumerMessageListener" id="consumerMessageListener"/>

    <!--2、SessionAwareMessageListener<T> - 接收到消息后可以通知Destination已接收到消息-->
    <bean class="org.springframework.jms.listener.DefaultMessageListenerContainer" id="sessionAwareListenerContainer">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="destination" ref="sessionAwareQueue"/>
        <property name="messageListener" ref="sessionAwareMessageListener"/>
    </bean>
    <bean class="cxy.spring.jms.listener.ConsumerSessionAwareMessageListener" id="sessionAwareMessageListener">
        <property name="destination" ref="activeMQQueue"/><!--回复消息destination-->
    </bean>

    <!--3、MessageListenerAdapter - 自定义消息接收实体及处理方法-->
    <!--4、MessageListenerAdapter - 当消息处理器方法返回值不为空（空 | null | void）时，Spring会自动将返回消息封装为JMSMessage对象并返回到已设置的Destination[两种方法实现 message.setJMSReplyTo 方法&&优先级更高 || MessageListenerAdapter的defaultResponseDestination属性]-->
    <bean class="org.springframework.jms.listener.DefaultMessageListenerContainer" id="messageListenerAdapterContainer">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="destination" ref="adapterQueue"/>
        <property name="messageListener" ref="messageListenerAdapter"/>
    </bean>
    <bean class="org.springframework.jms.listener.adapter.MessageListenerAdapter" id="messageListenerAdapter">
        <!--设置自定义的消息处理实体类-->
        <property name="delegate">
            <bean class="cxy.spring.jms.listener.ConsumerListener"/>
        </property>
        <!--
            如果指定的消息处理实体是一个普通的Java时，Spring将利用Message进行类型转换之后的对象作为参数通过反射去调用真正的消息处理实体的处理方法
            TODO 如果不指定此属性，Spring会默认调用目标处理器的handleMessage方法
        -->
        <property name="defaultListenerMethod" value="receiveMessage"/>
        <property name="defaultResponseDestination" ref="responseQueue"/>
        <!--指定消息转换器-->
        <property name="messageConverter" ref="emailMessageConverter"/>
    </bean>

    <bean class="org.springframework.jms.listener.DefaultMessageListenerContainer" id="responseQueueMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="destination" ref="responseQueue"/>
        <property name="messageListener" ref="responseQueueListener"/>
    </bean>
    <bean class="cxy.spring.jms.listener.ResponseQueueListener" id="responseQueueListener"/>


    <!-- ====================================================================================== -->

    <!--生产者端配置-->
    <!--
        两种模式发布 - 发布的 Destination
            点对点模式  -  一对一
            订阅/发布模式  -  一对多
    -->
    <!--队列目的地-->
    <bean class="org.apache.activemq.command.ActiveMQQueue" id="activeMQQueue">
        <constructor-arg>
            <value>queue</value>
        </constructor-arg>
    </bean>
    <bean class="org.apache.activemq.command.ActiveMQTopic" id="activeMQTopic">
        <constructor-arg value="topic"/>
    </bean>

    <bean class="org.apache.activemq.command.ActiveMQQueue" id="sessionAwareQueue">
        <constructor-arg>
            <value>sessionAwareQueue</value>
        </constructor-arg>
    </bean>
    <bean class="org.apache.activemq.command.ActiveMQQueue" id="adapterQueue">
        <constructor-arg>
            <value>adapterQueue</value>
        </constructor-arg>
    </bean>
    <bean class="org.apache.activemq.command.ActiveMQQueue" id="responseQueue">
        <constructor-arg>
            <value>responseQueue</value>
        </constructor-arg>
    </bean>


    <!--定义JmsTemplate-->
    <bean class="org.springframework.jms.core.JmsTemplate" id="jmsTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <!--TODO defaultDestinationName 会被默认解析为 ActiveMQQueue -->
        <!--<property name="defaultDestination" ref="activeMQQueue"/>-->

        <property name="messageConverter" ref="emailMessageConverter"/>
    </bean>

    <!--自定义MessMessageConverter-->
    <bean class="cxy.spring.jms.converter.EmailMessageConverter" id="emailMessageConverter"/>

    <!--池化ConnectionFactory TODO 用来将 Connection & Session & MessageProducer 池化-->
    <bean class="org.apache.activemq.pool.PooledConnectionFactory" id="pooledConnectionFactory">
        <property name="connectionFactory" ref="activeMQConnectionFactory"/>
        <property name="maxConnections" value="10"/>
    </bean>

    <!--真正可以产生Connection的ConnectionFactory - 由对应的 JMS 服务厂商提供-->
    <bean class="org.apache.activemq.ActiveMQConnectionFactory" id="activeMQConnectionFactory">
        <property name="brokerURL" value="tcp://localhost:61616"/>
        <!--ActiveMQ 5.12.2 | 5.13.1 版本在使用 ObjectMessage 进行序列化或反序列化自定义对象时，为了安全必须指定目标类所在的包-->
        <!--<property name="trustAllPackages" value="true"/>-->
        <property name="trustedPackages">
            <list>
                <value>cxy.spring.jms.model</value>
            </list>
        </property>
    </bean>

    <!--
        获取JMS服务器链接 - Spring用于管理真正的ConnectionFactory的ConnectionFactory
            SingleConnectionFactory  一直返回同一个链接；cxy 会忽略 Connection 的 close() 方法
            CachingConnectionFactory[extends SingleConnectionFactory] 新增缓存功能
    -->
    <bean class="org.springframework.jms.connection.SingleConnectionFactory" id="connectionFactory">
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
        <property name="targetConnectionFactory" ref="activeMQConnectionFactory"/><!--fixme 此处配置为PooledConnectionFactory -->
    </bean>

</beans>